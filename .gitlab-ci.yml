# This file is a template, and might need editing before it works on your project.
# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.
docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile



aws_deploy_job:
    stage: deploy
    only:
      - develop

    before_script:
      - mkdir -p ~/.ssh
      - echo -e "$DEPLOY_SERVER_SSH_PRIV_KEY" > ~/.ssh/id_deploy
      - chmod 600 ~/.ssh/id_deploy
      - echo -e "$APP_SERVER_PRIVATE_KEY" > ~/.ssh/id_rsa_app
      - chmod 600 ~/.ssh/id_rsa_app
      - '[ -f /.dockerenv ] && echo -e "HOST *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

    script:
      - bash .gitlab-deploy.sh $CI_DEPLOY_USER $CI_DEPLOY_PASSWORD  
